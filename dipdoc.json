var dipdoc = {
    "js": {
        "data": {
            "ivartech.ivar.patt.Events": {
                "content": [
                    {
                        "parent": "ivar.patt.", 
                        "doc": {
                            "description": [
                                ""
                            ], 
                            "excerpt": "", 
                            "constructor": [
                                ""
                            ], 
                            "classdesc": [
                                ""
                            ], 
                            "property": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "list", 
                                    "description": "Contains the event names paired with arrays of functions"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "array"
                                    ], 
                                    "name": "event_names", 
                                    "description": "Contains all the event names\n"
                                }
                            ], 
                            "class": [
                                ""
                            ]
                        }, 
                        "type": "function", 
                        "name": "Events ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.patt.Events", 
                        "doc": {
                            "excerpt": "Binds a single function or an array of functions to an event name", 
                            "description": [
                                "Binds a single function or an array of functions to an event name\n\nvar me = new ivar.patt.Events();\nme.bind(['foo','bar','baz'], function(){\nprint('foo%bar%baz');\n});\n\nme.bind(['foo','baz'], function(){\nprint('foo%baz');\n});\n\nme.bind(['baz','bar'], function(){\nprint('baz%bar');\n});\n\nivar.print(me);\nme.fire('foo');\nme.unbind(['bar','baz']);\nme.fire('baz');\nme.fire('bar');"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "event_name", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "function", 
                                        "array[function,...]"
                                    ], 
                                    "name": "func", 
                                    "description": "(...)\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "bind ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.patt.Events", 
                        "doc": {
                            "excerpt": "Removes a certain function or array of functions from an event, thus disabling them to be fired", 
                            "description": [
                                "Removes a certain function or array of functions from an event, thus disabling them to be fired"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "event_name", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "function", 
                                        "array[function,...]"
                                    ], 
                                    "name": "func", 
                                    "description": "(...)\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "unbind ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.patt.Events", 
                        "doc": {
                            "excerpt": "Executes all of the functions stored under given event name. Except mandatory event name parameter it can be passed infinite number of parameters that will be passed to functions.", 
                            "description": [
                                "Executes all of the functions stored under given event name. Except mandatory event name parameter it can be passed infinite number of parameters that will be passed to functions."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "event_name", 
                                    "description": "\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "fire ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.patt.Events", 
                        "doc": {
                            "excerpt": "Returns an array of all of the names of events that can be fired", 
                            "description": [
                                "Returns an array of all of the names of events that can be fired"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "event_name", 
                                    "description": "\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "getBound ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.patt.Events", 
                        "doc": {
                            "excerpt": "Removes an event by given event name with all bound functions", 
                            "description": [
                                "Removes an event by given event name with all bound functions"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "event_name", 
                                    "description": "\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "clearBound ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.patt.Events", 
                        "doc": {
                            "excerpt": "Removes all entries and restores the object to null state", 
                            "description": [
                                "Removes all entries and restores the object to null state"
                            ]
                        }, 
                        "type": "function", 
                        "name": "clear ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.patt.Events", 
                        "doc": {
                            "excerpt": "Returns length|size, that is number of events", 
                            "return": [
                                {
                                    "type": [
                                        "number"
                                    ], 
                                    "description": "\n"
                                }
                            ], 
                            "description": [
                                "Returns length|size, that is number of events"
                            ]
                        }, 
                        "type": "function", 
                        "name": "size ", 
                        "unit": {}
                    }
                ], 
                "header": {
                    "description": [
                        ""
                    ], 
                    "copyright": [
                        "IVARTECH http://ivartech.com"
                    ], 
                    "author": [
                        "Nikola Stamatovic Stamat <stamat@ivartech.com>"
                    ], 
                    "excerpt": "", 
                    "namespace": [
                        "ivar.patt\n"
                    ], 
                    "uri": "dipdoc/ivartech/ivar/patt/Events.js", 
                    "id": "ivartech.ivar.patt.Events", 
                    "version": [
                        "20130313\n"
                    ], 
                    "file": [
                        "IVARTECH Events Class | Mediator pattern"
                    ], 
                    "sloc": 167, 
                    "lines": 270
                }
            }, 
            "ivartech.ivar.data.Map": {
                "content": [
                    {
                        "parent": "ivar.data.", 
                        "doc": {
                            "property": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "number"
                                    ], 
                                    "name": "length", 
                                    "description": "Length of the map, like array length. Even though keys.length would do fine, this is kept for elegance"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "object", 
                                    "description": "Object that contains key-value pairs"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "array"
                                    ], 
                                    "name": "keys", 
                                    "description": "Array containing key names used as keys in object to enable getFirst and getLast functionality\n"
                                }
                            ], 
                            "constructor": [
                                ""
                            ], 
                            "excerpt": "Map class similar to Java Map, providing methods for efficient usage of traditional key-value hash table storage", 
                            "description": [
                                "Map class similar to Java Map, providing methods for efficient usage of traditional key-value hash table storage"
                            ], 
                            "class": [
                                " \tasf\t\ts"
                            ]
                        }, 
                        "type": "function", 
                        "name": "Map ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Stores key and value to map object", 
                            "return": [
                                {
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "description": "Returns the key value\n"
                                }
                            ], 
                            "description": [
                                "Stores key and value to map object"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "key", 
                                    "description": "A value that represents key for value retrieval"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "value", 
                                    "description": "A value marked with the correspondent key"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "put ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Clones another map's values to this map", 
                            "description": [
                                "Clones another map's values to this map"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "Map"
                                    ], 
                                    "name": "map", 
                                    "description": "Map to which values should be cloned\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "putAll ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Removes the map entry by given key", 
                            "return": [
                                {
                                    "type": [
                                        "any"
                                    ], 
                                    "description": "Returns the value of removed entry\n"
                                }
                            ], 
                            "description": [
                                "Removes the map entry by given key"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "key", 
                                    "description": "Name of the key under which a value is stored"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "remove ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "excerpt": "Sorts the keys alphabetically or by provided sorting functionality", 
                            "description": [
                                "Sorts the keys alphabetically or by provided sorting functionality"
                            ], 
                            "param": [
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "function"
                                    ], 
                                    "name": "fn", 
                                    "description": "Sorting function\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "sort ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Gets the value stored under given key", 
                            "return": [
                                {
                                    "type": [
                                        "any"
                                    ], 
                                    "description": "Returns the value stored under the key or undefined if key isnt found\n"
                                }
                            ], 
                            "description": [
                                "Gets the value stored under given key"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "key", 
                                    "description": "A value that represents key for value retrieval"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "get ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Gets the value stored under given order number", 
                            "return": [
                                {
                                    "type": [
                                        "any"
                                    ], 
                                    "description": "Returns the value stored under the key or null if key isnt found\n"
                                }
                            ], 
                            "description": [
                                "Gets the value stored under given order number"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "number"
                                    ], 
                                    "name": "id", 
                                    "description": "Order number in keys array"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "getById ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Gets the value stored under the last entered key", 
                            "return": [
                                {
                                    "type": [
                                        "any"
                                    ], 
                                    "description": "Returns the value stored under the key or null if key isn't found\n"
                                }
                            ], 
                            "description": [
                                "Gets the value stored under the last entered key"
                            ]
                        }, 
                        "type": "function", 
                        "name": "getLast ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Gets the value stored under the first entered key", 
                            "return": [
                                {
                                    "type": [
                                        "any"
                                    ], 
                                    "description": "Returns the value stored under the key or null if key isn't found\n"
                                }
                            ], 
                            "description": [
                                "Gets the value stored under the first entered key"
                            ]
                        }, 
                        "type": "function", 
                        "name": "getFirst ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Gets a key name labeling the given value", 
                            "return": [
                                {
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "description": "Returns key name under which given value is stored\n"
                                }
                            ], 
                            "description": [
                                "Gets a key name labeling the given value"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "value", 
                                    "description": "Value used to find the keyname"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "getKey ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Gets this map's object containing keys and values", 
                            "return": [
                                {
                                    "type": [
                                        "object"
                                    ], 
                                    "description": "object containing keys and values\n"
                                }
                            ], 
                            "description": [
                                "Gets this map's object containing keys and values"
                            ]
                        }, 
                        "type": "function", 
                        "name": "entrySet ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Checks if the map is empty", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "returns true if Map is empty, otherwise false.\n"
                                }
                            ], 
                            "description": [
                                "Checks if the map is empty"
                            ]
                        }, 
                        "type": "function", 
                        "name": "isEmpty ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Does the map contain given key?", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "returns true if the given key exists in the map\n"
                                }
                            ], 
                            "description": [
                                "Does the map contain given key?"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "key", 
                                    "description": ""
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "hasKey ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Does the map contain given value?", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "returns true if the given value exists in the map\n"
                                }
                            ], 
                            "description": [
                                "Does the map contain given value?"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "value", 
                                    "description": ""
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "hasValue ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Returns list of all entry keys in the map", 
                            "return": [
                                {
                                    "type": [
                                        "array"
                                    ], 
                                    "description": "returns array of keys\n"
                                }
                            ], 
                            "description": [
                                "Returns list of all entry keys in the map"
                            ]
                        }, 
                        "type": "function", 
                        "name": "keys ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Returns list of all entry values in the map. SLOW! O(n)", 
                            "return": [
                                {
                                    "type": [
                                        "array"
                                    ], 
                                    "description": "returns array of values\n"
                                }
                            ], 
                            "description": [
                                "Returns list of all entry values in the map. SLOW! O(n)"
                            ]
                        }, 
                        "type": "function", 
                        "name": "values ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Checks if an other map is identical to this one!", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "returns true if they are identical\n"
                                }
                            ], 
                            "description": [
                                "Checks if an other map is identical to this one!\nCan be very slow if they have same keys and number of entries."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "Map"
                                    ], 
                                    "name": "map", 
                                    "description": ""
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "equals ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map\n"
                            ], 
                            "excerpt": "Resets the contents of the map to empty state", 
                            "description": [
                                "Resets the contents of the map to empty state"
                            ]
                        }, 
                        "type": "function", 
                        "name": "clear ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "For each entry of the map executes the given function", 
                            "description": [
                                "For each entry of the map executes the given function"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "function"
                                    ], 
                                    "name": "function", 
                                    "description": "(key,value) \tGiven functions that receives key and value as arguments\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "each ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "this", 
                        "doc": {
                            "this": [
                                "Map"
                            ], 
                            "excerpt": "Gets key name that holds supplied value", 
                            "description": [
                                "Gets key name that holds supplied value"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "value", 
                                    "description": "Given value as a search parameter\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "find ", 
                        "unit": {}
                    }
                ], 
                "header": {
                    "description": [
                        "Map data structure class"
                    ], 
                    "copyright": [
                        "IVARTECH http://ivartech.com"
                    ], 
                    "author": [
                        "Nikola Stamatovic Stamat <stamat@ivartech.com>"
                    ], 
                    "excerpt": "Map data structure class", 
                    "namespace": [
                        "ivar.data\n"
                    ], 
                    "uri": "dipdoc/ivartech/ivar/data/Map.js", 
                    "id": "ivartech.ivar.data.Map", 
                    "version": [
                        "20130313"
                    ], 
                    "file": [
                        "\n"
                    ], 
                    "sloc": 149, 
                    "lines": 321
                }
            }, 
            "template.js.jquery.min": {
                "content": [
                    {
                        "parent": "(function(e,t){var n,r,i=typeof t,o=e.location,a=e.document,s=a.documentElement,l=e.jQuery,u=e.$,c={},p=[],f=\"1.10.1\",d=p.concat,h=p.push,g=p.slice,m=p.indexOf,y=c.toString,v=c.hasOwnProperty,b=f.trim,x=function(e,t){return new x.fn.init(e,t,r)},w=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,T=/\\S+/g,C=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,N=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,k=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,E=/^[\\],:{}\\s]*$/,S=/(?:^|:|,)(?:\\s*\\[)+/g,A=/\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,j=/\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,D=/^-ms-/,L=/-([\\da-z])/gi,H=function(e,t){return t.toUpperCase()},q=function(e){(a.addEventListener||\"load\"===e.type||\"complete\"===a.readyState)&&(_(),x.ready())},_=function(){a.addEventListener?(a.removeEventListener(\"DOMContentLoaded\",q,!1),e.removeEventListener(\"load\",q,!1)):(a.detachEvent(\"onreadystatechange\",q),e.detachEvent(\"onload\",q))};x.fn=x.prototype={jquery:f,constructor:x,init:function(e,n,r){var i,o;if(!e)return this;if(\"string\"==typeof e){if(i=\"<\"===e.charAt(0)&&\">\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof x?n[0]:n,x.merge(this,x.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:a,!0)),k.test(i[1])&&x.isPlainObject(n))for(i in n)x.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(o=a.getElementById(i[2]),o&&o.parentNode){if(o.id!==i[2])return r.find(e);this.length=1,this[0]=o}return this.context=a,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:\"\",length:0,toArray:function(){return g.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(g.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for(\"boolean\"==typeof s&&(c=s,s=arguments[1]||{},l=2),\"object\"==typeof s||x.isFunction(s)||(s={}),u===l&&(s=this,--l);u>l;l++)if(null!=(o=arguments[l]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(x.isPlainObject(r)||(n=x.isArray(r)))?(n?(n=!1,a=e&&x.isArray(e)?e:[]):a=e&&x.isPlainObject(e)?e:{},s[i]=x.extend(c,a,r)):r!==t&&(s[i]=r));return s},x.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=l),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){if(e===!0?!--x.readyWait:!x.isReady){if(!a.body)return setTimeout(x.ready);x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(a,[x]),x.fn.trigger&&x(a).trigger(\"ready\").off(\"ready\"))}},isFunction:function(e){return\"function\"===x.type(e)},isArray:Array.isArray||function(e){return\"array\"===x.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?c[y.call(e)]||\"object\":typeof e},isPlainObject:function(e){var n;if(!e||\"object\"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!v.call(e,\"constructor\")&&!v.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(r){return!1}if(x.support.ownLast)for(n in e)return v.call(e,n);for(n in e);return n===t||v.call(e,n)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||a;var r=k.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:\"string\"==typeof n&&(n=x.trim(n),n&&E.test(n.replace(A,\"@\").replace(j,\"]\").replace(S,\"\")))?Function(\"return \"+n)():(x.error(\"Invalid JSON: \"+n),t)},parseXML:function(n){var r,i;if(!n||\"string\"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,\"text/xml\")):(r=new ActiveXObject(\"Microsoft.XMLDOM\"),r.async=\"false\",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName(\"parsererror\").length||x.error(\"Invalid XML: \"+n),r},noop:function(){},globalEval:function(t){t&&x.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(D,\"ms-\").replace(L,H)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:b&&!b.call(\"\\ufeff\\u00a0\")?function(e){return null==e?\"\":b.call(e)}:function(e){return null==e?\"\":(e+\"\").replace(C,\"\")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?x.merge(n,\"string\"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(m)return m.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if(\"number\"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return d.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return\"string\"==typeof n&&(o=e[n],n=e,e=o),x.isFunction(e)?(r=g.call(arguments,2),i=function(){return e.apply(n||this,r.concat(g.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):t},access:function(e,n,r,i,o,a,s){var l=0,u=e.length,c=null==r;if(\"object\"===x.type(r)){o=!0;for(l in r)x.access(e,n,l,r[l],!0,a,s)}else if(i!==t&&(o=!0,x.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(x(e),n)})),n))for(;u>l;l++)n(e[l],r,s?i:i.call(e[l],l,n(e[l],r)));return o?e:c?n.call(e):u?n(e[0],r):a},now:function(){return(new Date).getTime()},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),x.ready.promise=function(t){if(!n)if(n=x.Deferred(),\"complete\"===a.readyState)setTimeout(x.ready);else if(a.addEventListener)a.addEventListener(\"DOMContentLoaded\",q,!1),e.addEventListener(\"load\",q,!1);else{a.attachEvent(\"onreadystatechange\",q),e.attachEvent(\"onload\",q);var r=!1;try{r=null==e.frameElement&&a.documentElement}catch(i){}r&&r.doScroll&&function o(){if(!x.isReady){try{r.doScroll(\"left\")}catch(e){return setTimeout(o,50)}_(),x.ready()}}()}return n.promise(t)},x.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){c[\"[object \"+t+\"]\"]=t.toLowerCase()});function M(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}r=x(a),function(e,t){var n,r,i,o,a,s,l,u,c,p,f,d,h,g,m,y,v,b=\"sizzle\"+-new Date,w=e.document,T=0,C=0,N=lt(),k=lt(),E=lt(),S=!1,A=function(){return 0},j=typeof t,D=1<<31,L={}.hasOwnProperty,H=[],q=H.pop,_=H.push,M=H.push,O=H.slice,F=H.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},B=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",P=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",R=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",W=R.replace(\"w\",\"w#\"),$=\"\\\\[\"+P+\"*(\"+R+\")\"+P+\"*(?:([*^$|!~]?=)\"+P+\"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\"+W+\")|)|)\"+P+\"*\\\\]\",I=\":(\"+R+\")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+$.replace(3,8)+\")*)|.*)\\\\)|)\",z=RegExp(\"^\"+P+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+P+\"+$\",\"g\"),X=RegExp(\"^\"+P+\"*,\"+P+\"*\"),U=RegExp(\"^\"+P+\"*([>+~]|\"+P+\")\"+P+\"*\"),V=RegExp(P+\"*[+~]\"),Y=RegExp(\"=\"+P+\"*([^\\\\]'\\\"]*)\"+P+\"*\\\\]\",\"g\"),J=RegExp(I),G=RegExp(\"^\"+W+\"$\"),Q={ID:RegExp(\"^#(\"+R+\")\"),CLASS:RegExp(\"^\\\\.(\"+R+\")\"),TAG:RegExp(\"^(\"+R.replace(\"w\",\"w*\")+\")\"),ATTR:RegExp(\"^\"+$),PSEUDO:RegExp(\"^\"+I),CHILD:RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+P+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+P+\"*(?:([+-]|)\"+P+\"*(\\\\d+)|))\"+P+\"*\\\\)|)\",\"i\"),bool:RegExp(\"^(?:\"+B+\")$\",\"i\"),needsContext:RegExp(\"^\"+P+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+P+\"*((?:-\\\\d)?\\\\d*)\"+P+\"*\\\\)|)(?=[^-]|$)\",\"i\")},K=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,et=/^(?:input|select|textarea|button)$/i,tt=/^h\\d$/i,nt=/'|\\\\/g,rt=RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+P+\"?|(\"+P+\")|.)\",\"ig\"),it=function(e,t,n){var r=\"0x\"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{M.apply(H=O.call(w.childNodes),w.childNodes),H[w.childNodes.length].nodeType}catch(ot){M={apply:H.length?function(e,t){_.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function at(e,t,n,i){var o,a,s,l,u,c,d,m,y,x;if((t?t.ownerDocument||t:w)!==f&&p(t),t=t||f,n=n||[],!e||\"string\"!=typeof e)return n;if(1!==(l=t.nodeType)&&9!==l)return[];if(h&&!i){if(o=Z.exec(e))if(s=o[1]){if(9===l){if(a=t.getElementById(s),!a||!a.parentNode)return n;if(a.id===s)return n.push(a),n}else if(t.ownerDocument&&(a=t.ownerDocument.getElementById(s))&&v(t,a)&&a.id===s)return n.push(a),n}else{if(o[2])return M.apply(n,t.getElementsByTagName(e)),n;if((s=o[3])&&r.getElementsByClassName&&t.getElementsByClassName)return M.apply(n,t.getElementsByClassName(s)),n}if(r.qsa&&(!g||!g.test(e))){if(m=d=b,y=t,x=9===l&&e,1===l&&\"object\"!==t.nodeName.toLowerCase()){c=bt(e),(d=t.getAttribute(\"id\"))?m=d.replace(nt,\"\\\\$&\"):t.setAttribute(\"id\",m),m=\"[id='\"+m+\"'] \",u=c.length;while(u--)c[u]=m+xt(c[u]);y=V.test(e)&&t.parentNode||t,x=c.join(\",\")}if(x)try{return M.apply(n,y.querySelectorAll(x)),n}catch(T){}finally{d||t.removeAttribute(\"id\")}}}return At(e.replace(z,\"$1\"),t,n,i)}function st(e){return K.test(e+\"\")}function lt(){var e=[];function t(n,r){return e.push(n+=\" \")>o.cacheLength&&delete t[e.shift()],t[n]=r}return t}function ut(e){return e[b]=!0,e}function ct(e){var t=f.createElement(\"div\");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function pt(e,t,n){e=e.split(\"|\");var r,i=e.length,a=n?null:t;while(i--)(r=o.attrHandle[e[i]])&&r!==t||(o.attrHandle[e[i]]=a)}function ft(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:e[t]===!0?t.toLowerCase():null}function dt(e,t){return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}function ht(e){return\"input\"===e.nodeName.toLowerCase()?e.defaultValue:t}function gt(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function mt(e){return function(t){var n=t.nodeName.toLowerCase();return\"input\"===n&&t.type===e}}function yt(e){return function(t){var n=t.nodeName.toLowerCase();return(\"input\"===n||\"button\"===n)&&t.type===e}}function vt(e){return ut(function(t){return t=+t,ut(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}s=at.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?\"HTML\"!==t.nodeName:!1},r=at.support={},p=at.setDocument=function(e){var n=e?e.ownerDocument||e:w,i=n.parentWindow;return n!==f&&9===n.nodeType&&n.documentElement?(f=n,d=n.documentElement,h=!s(n),i&&i.frameElement&&i.attachEvent(\"onbeforeunload\",function(){p()}),r.attributes=ct(function(e){return e.innerHTML=\"<a href='#'></a>\",pt(\"type|href|height|width\",dt,\"#\"===e.firstChild.getAttribute(\"href\")),pt(B,ft,null==e.getAttribute(\"disabled\")),e.className=\"i\",!e.getAttribute(\"className\")}),r.input=ct(function(e){return e.innerHTML=\"<input>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")}),pt(\"value\",ht,r.attributes&&r.input),r.getElementsByTagName=ct(function(e){return e.appendChild(n.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),r.getElementsByClassName=ct(function(e){return e.innerHTML=\"<div class='a'></div><div class='a i'></div>\",e.firstChild.className=\"i\",2===e.getElementsByClassName(\"i\").length}),r.getById=ct(function(e){return d.appendChild(e).id=b,!n.getElementsByName||!n.getElementsByName(b).length}),r.getById?(o.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},o.filter.ID=function(e){var t=e.replace(rt,it);return function(e){return e.getAttribute(\"id\")===t}}):(delete o.find.ID,o.filter.ID=function(e){var t=e.replace(rt,it);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode(\"id\");return n&&n.value===t}}),o.find.TAG=r.getElementsByTagName?function(e,n){return typeof n.getElementsByTagName!==j?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},o.find.CLASS=r.getElementsByClassName&&function(e,n){return typeof n.getElementsByClassName!==j&&h?n.getElementsByClassName(e):t},m=[],g=[],(r.qsa=st(n.querySelectorAll))&&(ct(function(e){e.innerHTML=\"<select><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||g.push(\"\\\\[\"+P+\"*(?:value|\"+B+\")\"),e.querySelectorAll(\":checked\").length||g.push(\":checked\")}),ct(function(e){var t=n.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"t\",\"\"),e.querySelectorAll(\"[t^='']\").length&&g.push(\"[*^$]=\"+P+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":enabled\").length||g.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),g.push(\",.*:\")})),(r.matchesSelector=st(y=d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ct(function(e){r.disconnectedMatch=y.call(e,\"div\"),y.call(e,\"[s!='']:x\"),m.push(\"!=\",I)}),g=g.length&&RegExp(g.join(\"|\")),m=m.length&&RegExp(m.join(\"|\")),v=st(d.contains)||d.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},r.sortDetached=ct(function(e){return 1&e.compareDocumentPosition(n.createElement(\"div\"))}),A=d.compareDocumentPosition?function(e,t){if(e===t)return S=!0,0;var i=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t);return i?1&i||!r.sortDetached&&t.compareDocumentPosition(e)===i?e===n||v(w,e)?-1:t===n||v(w,t)?1:c?F.call(c,e)-F.call(c,t):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return S=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:c?F.call(c,e)-F.call(c,t):0;if(o===a)return gt(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?gt(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},n):f},at.matches=function(e,t){return at(e,null,null,t)},at.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&p(e),t=t.replace(Y,\"='$1']\"),!(!r.matchesSelector||!h||m&&m.test(t)||g&&g.test(t)))try{var n=y.call(e,t);if(n||r.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(i){}return at(t,f,null,[e]).length>0},at.contains=function(e,t){return(e.ownerDocument||e)!==f&&p(e),v(e,t)},at.attr=function(e,n){(e.ownerDocument||e)!==f&&p(e);var i=o.attrHandle[n.toLowerCase()],a=i&&L.call(o.attrHandle,n.toLowerCase())?i(e,n,!h):t;return a===t?r.attributes||!h?e.getAttribute(n):(a=e.getAttributeNode(n))&&a.specified?a.value:null:a},at.error=function(e){throw Error(\"Syntax error, unrecognized expression: \"+e)},at.uniqueSort=function(e){var t,n=[],i=0,o=0;if(S=!r.detectDuplicates,c=!r.sortStable&&e.slice(0),e.sort(A),S){while(t=e[o++])t===e[o]&&(i=n.push(o));while(i--)e.splice(n[i],1)}return e},a=at.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=a(t);return n},o=at.selectors={cacheLength:50,createPseudo:ut,match:Q,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(rt,it),e[3]=(e[4]||e[5]||\"\").replace(rt,it),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||at.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&at.error(e[0]),e},PSEUDO:function(e){var n,r=!e[5]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]&&e[4]!==t?e[2]=e[4]:r&&J.test(r)&&(n=bt(r,!0))&&(n=r.indexOf(\")\",r.length-n)-r.length)&&(e[0]=e[0].slice(0,n),e[2]=r.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(rt,it).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=N[e+\" \"];return t||(t=RegExp(\"(^|\"+P+\")\"+e+\"(\"+P+\"|$)\"))&&N(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r){var i=at.attr(r,e);return null==i?\"!=\"===t:t?(i+=\"\",\"=\"===t?i===n:\"!=\"===t?i!==n:\"^=\"===t?n&&0===i.indexOf(n):\"*=\"===t?n&&i.indexOf(n)>-1:\"$=\"===t?n&&i.slice(-n.length)===n:\"~=\"===t?(\" \"+i+\" \").indexOf(n)>-1:\"|=\"===t?i===n||i.slice(0,n.length+1)===n+\"-\":!1):!0}},CHILD:function(e,t,n,r,i){var o=\"nth\"!==e.slice(0,3),a=\"last\"!==e.slice(-4),s=\"of-type\"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,p,f,d,h,g=o!==a?\"nextSibling\":\"previousSibling\",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g=\"only\"===e&&!h&&\"nextSibling\"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[b]||(m[b]={}),u=c[e]||[],d=u[0]===T&&u[1],f=u[0]===T&&u[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[T,d,f];break}}else if(v&&(u=(t[b]||(t[b]={}))[e])&&u[0]===T)f=u[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[b]||(p[b]={}))[e]=[T,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=o.pseudos[e]||o.setFilters[e.toLowerCase()]||at.error(\"unsupported pseudo: \"+e);return r[b]?r(t):r.length>1?(n=[e,e,\"\",t],o.setFilters.hasOwnProperty(e.toLowerCase())?ut(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=F.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ut(function(e){var t=[],n=[],r=l(e.replace(z,\"$1\"));return r[b]?ut(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ut(function(e){return function(t){return at(e,t).length>0}}),contains:ut(function(e){return function(t){return(t.textContent||t.innerText||a(t)).indexOf(e)>-1}}),lang:ut(function(e){return G.test(e||\"\")||at.error(\"unsupported lang: \"+e),e=e.replace(rt,it).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+\"-\");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===d},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>\"@\"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!o.pseudos.empty(e)},header:function(e){return tt.test(e.nodeName)},input:function(e){return et.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||t.toLowerCase()===e.type)},first:vt(function(){return[0]}),last:vt(function(e,t){return[t-1]}),eq:vt(function(e,t,n){return[0>n?n+t:n]}),even:vt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:vt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:vt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:vt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[n]=mt(n);for(n in{submit:!0,reset:!0})o.pseudos[n]=yt(n);function bt(e,t){var n,r,i,a,s,l,u,c=k[e+\" \"];if(c)return t?0:c.slice(0);s=e,l=[],u=o.preFilter;while(s){(!n||(r=X.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),l.push(i=[])),n=!1,(r=U.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(z,\" \")}),s=s.slice(n.length));for(a in o.filter)!(r=Q[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),i.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?at.error(e):k(e,l).slice(0)}function xt(e){var t=0,n=e.length,r=\"\";for(;n>t;t++)r+=e[t].value;return r}function wt(e,t,n){var r=t.dir,o=n&&\"parentNode\"===r,a=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||o)return e(t,n,i)}:function(t,n,s){var l,u,c,p=T+\" \"+a;if(s){while(t=t[r])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[r])if(1===t.nodeType||o)if(c=t[b]||(t[b]={}),(u=c[r])&&u[0]===p){if((l=u[1])===!0||l===i)return l===!0}else if(u=c[r]=[p],u[1]=e(t,n,s)||i,u[1]===!0)return!0}}function Tt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ct(e,t,n,r,i){var o,a=[],s=0,l=e.length,u=null!=t;for(;l>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),u&&t.push(s));return a}function Nt(e,t,n,r,i,o){return r&&!r[b]&&(r=Nt(r)),i&&!i[b]&&(i=Nt(i,o)),ut(function(o,a,s,l){var u,c,p,f=[],d=[],h=a.length,g=o||St(t||\"*\",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:Ct(g,f,e,s,l),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,l),r){u=Ct(y,d),r(u,[],s,l),c=u.length;while(c--)(p=u[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){u=[],c=y.length;while(c--)(p=y[c])&&u.push(m[c]=p);i(null,y=[],u,l)}c=y.length;while(c--)(p=y[c])&&(u=i?F.call(o,p):f[c])>-1&&(o[u]=!(a[u]=p))}}else y=Ct(y===a?y.splice(h,y.length):y),i?i(null,a,y,l):M.apply(a,y)})}function kt(e){var t,n,r,i=e.length,a=o.relative[e[0].type],s=a||o.relative[\" \"],l=a?1:0,c=wt(function(e){return e===t},s,!0),p=wt(function(e){return F.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;i>l;l++)if(n=o.relative[e[l].type])f=[wt(Tt(f),n)];else{if(n=o.filter[e[l].type].apply(null,e[l].matches),n[b]){for(r=++l;i>r;r++)if(o.relative[e[r].type])break;return Nt(l>1&&Tt(f),l>1&&xt(e.slice(0,l-1).concat({value:\" \"===e[l-2].type?\"*\":\"\"})).replace(z,\"$1\"),n,r>l&&kt(e.slice(l,r)),i>r&&kt(e=e.slice(r)),i>r&&xt(e))}f.push(n)}return Tt(f)}function Et(e,t){var n=0,r=t.length>0,a=e.length>0,s=function(s,l,c,p,d){var h,g,m,y=[],v=0,b=\"0\",x=s&&[],w=null!=d,C=u,N=s||a&&o.find.TAG(\"*\",d&&l.parentNode||l),k=T+=null==C?1:Math.random()||.1;for(w&&(u=l!==f&&l,i=n);null!=(h=N[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,l,c)){p.push(h);break}w&&(T=k,i=++n)}r&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,r&&b!==v){g=0;while(m=t[g++])m(x,y,l,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=q.call(p));y=Ct(y)}M.apply(p,y),w&&!s&&y.length>0&&v+t.length>1&&at.uniqueSort(p)}return w&&(T=k,u=C),x};return r?ut(s):s}l=at.compile=function(e,t){var n,r=[],i=[],o=E[e+\" \"];if(!o){t||(t=bt(e)),n=t.length;while(n--)o=kt(t[n]),o[b]?r.push(o):i.push(o);o=E(e,Et(i,r))}return o};function St(e,t,n){var r=0,i=t.length;for(;i>r;r++)at(e,t[r],n);return n}function At(e,t,n,i){var a,s,u,c,p,f=bt(e);if(!i&&1===f.length){if(s=f[0]=f[0].slice(0),s.length>2&&\"ID\"===(u=s[0]).type&&r.getById&&9===t.nodeType&&h&&o.relative[s[1].type]){if(t=(o.find.ID(u.matches[0].replace(rt,it),t)||[])[0],!t)return n;e=e.slice(s.shift().value.length)}a=Q.needsContext.test(e)?0:s.length;while(a--){if(u=s[a],o.relative[c=u.type])break;if((p=o.find[c])&&(i=p(u.matches[0].replace(rt,it),V.test(s[0].type)&&t.parentNode||t))){if(s.splice(a,1),e=i.length&&xt(s),!e)return M.apply(n,i),n;break}}}return l(e,f)(i,t,!h,n,V.test(e)),n}o.pseudos.nth=o.pseudos.eq;function jt(){}jt.prototype=o.filters=o.pseudos,o.setFilters=new jt,r.sortStable=b.split(\"\").sort(A).join(\"\")===b,p(),[0,0].sort(A),r.detectDuplicates=S,x.find=at,x.expr=at.selectors,x.expr[\":\"]=x.expr.pseudos,x.unique=at.uniqueSort,x.text=at.getText,x.isXMLDoc=at.isXML,x.contains=at.contains}(e);var O={};function F(e){var t=O[e]={};return x.each(e.match(T)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e=\"string\"==typeof e?O[e]||F(e):x.extend({},e);var n,r,i,o,a,s,l=[],u=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=l.length,n=!0;l&&o>a;a++)if(l[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,l&&(u?u.length&&c(u.shift()):r?l=[]:p.disable())},p={add:function(){if(l){var t=l.length;(function i(t){x.each(t,function(t,n){var r=x.type(n);\"function\"===r?e.unique&&p.has(n)||l.push(n):n&&n.length&&\"string\"!==r&&i(n)})})(arguments),n?o=l.length:r&&(s=t,c(r))}return this},remove:function(){return l&&x.each(arguments,function(e,t){var r;while((r=x.inArray(t,l,r))>-1)l.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?x.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],o=0,this},disable:function(){return l=u=r=t,this},disabled:function(){return!l},lock:function(){return u=t,r||p.disable(),this},locked:function(){return!u},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!l||i&&!u||(n?u.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},x.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",x.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",x.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",x.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var a=o[0],s=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+\"With\"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+\"With\"](this===i?r:this,arguments),this},i[o[0]+\"With\"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=g.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?g.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,l,u;if(r>1)for(s=Array(r),l=Array(r),u=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(a(t,u,n)).fail(o.reject).progress(a(t,l,s)):--i;return i||o.resolveWith(u,n),o.promise()}}),x.support=function(t){var n,r,o,s,l,u,c,p,f,d=a.createElement(\"div\");if(d.setAttribute(\"className\",\"t\"),d.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",n=d.getElementsByTagName(\"*\")||[],r=d.getElementsByTagName(\"a\")[0],!r||!r.style||!n.length)return t;s=a.createElement(\"select\"),u=s.appendChild(a.createElement(\"option\")),o=d.getElementsByTagName(\"input\")[0],r.style.cssText=\"top:1px;float:left;opacity:.5\",t.getSetAttribute=\"t\"!==d.className,t.leadingWhitespace=3===d.firstChild.nodeType,t.tbody=!d.getElementsByTagName(\"tbody\").length,t.htmlSerialize=!!d.getElementsByTagName(\"link\").length,t.style=/top/.test(r.getAttribute(\"style\")),t.hrefNormalized=\"/a\"===r.getAttribute(\"href\"),t.opacity=/^0.5/.test(r.style.opacity),t.cssFloat=!!r.style.cssFloat,t.checkOn=!!o.value,t.optSelected=u.selected,t.enctype=!!a.createElement(\"form\").enctype,t.html5Clone=\"<:nav></:nav>\"!==a.createElement(\"nav\").cloneNode(!0).outerHTML,t.inlineBlockNeedsLayout=!1,t.shrinkWrapBlocks=!1,t.pixelPosition=!1,t.deleteExpando=!0,t.noCloneEvent=!0,t.reliableMarginRight=!0,t.boxSizingReliable=!0,o.checked=!0,t.noCloneChecked=o.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!u.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}o=a.createElement(\"input\"),o.setAttribute(\"value\",\"\"),t.input=\"\"===o.getAttribute(\"value\"),o.value=\"t\",o.setAttribute(\"type\",\"radio\"),t.radioValue=\"t\"===o.value,o.setAttribute(\"checked\",\"t\"),o.setAttribute(\"name\",\"t\"),l=a.createDocumentFragment(),l.appendChild(o),t.appendChecked=o.checked,t.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent(\"onclick\",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c=\"on\"+f,\"t\"),t[f+\"Bubbles\"]=c in e||d.attributes[c].expando===!1;d.style.backgroundClip=\"content-box\",d.cloneNode(!0).style.backgroundClip=\"\",t.clearCloneStyle=\"content-box\"===d.style.backgroundClip;for(f in x(t))break;return t.ownLast=\"0\"!==f,x(function(){var n,r,o,s=\"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\",l=a.getElementsByTagName(\"body\")[0];l&&(n=a.createElement(\"div\"),n.style.cssText=\"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\",l.appendChild(n).appendChild(d),d.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",o=d.getElementsByTagName(\"td\"),o[0].style.cssText=\"padding:0;margin:0;border:0;display:none\",p=0===o[0].offsetHeight,o[0].style.display=\"\",o[1].style.display=\"none\",t.reliableHiddenOffsets=p&&0===o[0].offsetHeight,d.innerHTML=\"\",d.style.cssText=\"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\",x.swap(l,null!=l.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===d.offsetWidth}),e.getComputedStyle&&(t.pixelPosition=\"1%\"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable=\"4px\"===(e.getComputedStyle(d,null)||{width:\"4px\"}).width,r=d.appendChild(a.createElement(\"div\")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width=\"0\",d.style.width=\"1px\",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML=\"\",d.style.cssText=s+\"width:1px;padding:1px;display:inline;zoom:1\",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display=\"block\",d.innerHTML=\"<div></div>\",d.firstChild.style.width=\"5px\",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(l.style.zoom=1)),l.", 
                        "doc": {
                            "description": [
                                "! jQuery v1.10.1 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license\n//@ sourceMappingURL=jquery.min.map"
                            ], 
                            "excerpt": "! jQuery v1.10.1 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license", 
                            "lines": 6, 
                            "uri": "dipdoc/template/js/jquery.min.js", 
                            "file": [], 
                            "sloc": 2, 
                            "id": "template.js.jquery.min"
                        }, 
                        "type": "function", 
                        "name": "removeChild(n),n=d=o=r", 
                        "unit": {}
                    }
                ], 
                "header": {
                    "description": [
                        "! jQuery v1.10.1 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license\n//@ sourceMappingURL=jquery.min.map"
                    ], 
                    "excerpt": "! jQuery v1.10.1 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license", 
                    "lines": 6, 
                    "uri": "dipdoc/template/js/jquery.min.js", 
                    "file": [], 
                    "sloc": 2, 
                    "id": "template.js.jquery.min"
                }
            }, 
            "ivartech.ivar.data.JXON": {
                "content": [], 
                "header": {
                    "description": [
                        "JXON framework - JSON to XML and XML to JSON"
                    ], 
                    "author": [
                        "Copyleft 2011 by Mozilla Developer Network"
                    ], 
                    "lines": 15, 
                    "excerpt": "JXON framework - JSON to XML and XML to JSON", 
                    "uri": "dipdoc/ivartech/ivar/data/JXON.js", 
                    "id": "ivartech.ivar.data.JXON", 
                    "link": [
                        "https://developer.mozilla.org/en-US/docs/JXON"
                    ], 
                    "file": [], 
                    "sloc": 5, 
                    "example": [
                        "\nJXON.toJSON(xml);\nJXON.toXML(json);\n"
                    ]
                }
            }, 
            "ivartech.main": {
                "content": [
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "Checks if the variable is set or exists", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "\n"
                                }
                            ], 
                            "description": [
                                "Checks if the variable is set or exists"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "val", 
                                    "description": "Any variable or property"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "isSet ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "Checks if the variable is empty. Array with the length of 0,", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "\n"
                                }
                            ], 
                            "description": [
                                "Checks if the variable is empty. Array with the length of 0,\nempty string or empty object."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "array", 
                                        "object", 
                                        "string"
                                    ], 
                                    "name": "obj", 
                                    "description": "Any variable or property"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "isEmpty ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "System out print regular information shortcut. Prints to console or alert", 
                            "description": [
                                "System out print regular information shortcut. Prints to console or alert\nif console is unavailable."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "e", 
                                    "description": "Message in a form of a string or any other object that can be presented in console\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "echo ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "System out print warning information shortcut. Prints to console or alert", 
                            "description": [
                                "System out print warning information shortcut. Prints to console or alert\nif console is unavailable."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "e", 
                                    "description": "Message in a form of a string or any other object that can be presented in console\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "warn ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "System out print error information shortcut. Prints to console or alert", 
                            "description": [
                                "System out print error information shortcut. Prints to console or alert\nif console is unavailable."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "e", 
                                    "description": "Message in a form of a string or any other object that can be presented in console\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "error ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "System out print. Prints to console or alert", 
                            "description": [
                                "System out print. Prints to console or alert\nif console is unavailable."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "fn", 
                                    "description": "Function name of console object: log, warn, error..."
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "any"
                                    ], 
                                    "name": "msg", 
                                    "description": "Message in a form of a string or any other object that can be presented in console. Or if other arguments are present it is used as a label of set of console outputs"
                                }, 
                                "{any}\t\t[obj1,[obj2,...]]\n"
                            ]
                        }, 
                        "type": "function", 
                        "name": "systemMessage ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "Compares two objects", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "True if equal\n"
                                }
                            ], 
                            "description": [
                                "Compares two objects"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "a", 
                                    "description": "Any object with properties"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "b", 
                                    "description": "Any object with properties"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "compareObjects ", 
                        "unit": {}
                    }, 
                    {
                        "doc": {
                            "excerpt": "Are two values equal, deep compare for objects and arrays.", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "Are equal?\n"
                                }
                            ], 
                            "description": [
                                "Are two values equal, deep compare for objects and arrays."
                            ], 
                            "param": [
                                "a {any}", 
                                "b {any}"
                            ]
                        }, 
                        "type": "function", 
                        "name": "equal ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "Extends properties of a second object into first, overwriting all of it's properties if", 
                            "return": [
                                {
                                    "type": [
                                        "object"
                                    ], 
                                    "description": "Returns cloned object\n"
                                }
                            ], 
                            "description": [
                                "Extends properties of a second object into first, overwriting all of it's properties if\nthey have same properties. Used for loading options."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "extended", 
                                    "description": "First object to be extended"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "extender", 
                                    "description": "Second object extending the first one"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "number[0", 
                                        "1]", 
                                        "boolean"
                                    ], 
                                    "name": "clone", 
                                    "description": "First or the second object"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "extend ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "\"Short\" for loop. Should force me to separate inner loops into functions.", 
                            "description": [
                                "\"Short\" for loop. Should force me to separate inner loops into functions."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "number"
                                    ], 
                                    "name": "times", 
                                    "description": "Number of times to spin the function"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "function"
                                    ], 
                                    "name": "fn", 
                                    "description": "Function to be spun for the given number of times"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "number"
                                    ], 
                                    "name": "step=1", 
                                    "description": "Direction of loop depending on positive or negative value, increases or decreases count by given step\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "loop ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "copyleft": [
                                ""
                            ], 
                            "excerpt": "Parses string value into correct javascript data type", 
                            "return": [
                                {
                                    "type": [
                                        "null", 
                                        "boolean", 
                                        "number", 
                                        "date"
                                    ], 
                                    "description": "\n"
                                }
                            ], 
                            "description": [
                                "Parses string value into correct javascript data type"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "sValue", 
                                    "description": ""
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "parseText ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar._private.", 
                        "doc": {
                            "excerpt": "===============================================================================", 
                            "description": [
                                "===============================================================================\nCrc32 is a JavaScript function for computing the CRC32 of a string\n...............................................................................\n\nVersion: 1.2 - 2006/11 - http://noteslog.com/category/javascript/\n\n-------------------------------------------------------------------------------\nCopyright (c) 2006 Andrea Ercolino\nhttp://www.opensource.org/licenses/mit-license.php\n==============================================================================="
                            ]
                        }, 
                        "type": "field", 
                        "name": "crc32_table ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.", 
                        "doc": {
                            "excerpt": "Number */", 
                            "description": [
                                "Number */"
                            ]
                        }, 
                        "type": "function", 
                        "name": "crc32 ", 
                        "unit": {}
                    }
                ], 
                "header": {
                    "description": [
                        ""
                    ], 
                    "copyright": [
                        "IVARTECH http://ivartech.com"
                    ], 
                    "author": [
                        "Nikola Stamatovic Stamat <stamat@ivartech.com>"
                    ], 
                    "excerpt": "", 
                    "namespace": [
                        "ivar\n"
                    ], 
                    "uri": "dipdoc/ivartech/main.js", 
                    "id": "ivartech.main", 
                    "version": [
                        "20130313\n"
                    ], 
                    "file": [
                        "IVARTECH JavaScript Library - main class"
                    ], 
                    "sloc": 905, 
                    "lines": 1211
                }
            }, 
            "ivartech.ivar.draw.filter": {
                "content": [], 
                "header": {
                    "description": [
                        "Canvas filter engine"
                    ], 
                    "author": [
                        "Nikola Stamatovic Stamat"
                    ], 
                    "lines": 164, 
                    "since": [
                        ""
                    ], 
                    "excerpt": "Canvas filter engine", 
                    "uri": "dipdoc/ivartech/ivar/draw/filter.js", 
                    "file": [], 
                    "sloc": 116, 
                    "todo": [
                        {
                            "urgent": false, 
                            "task": ": test, organize, comment the fucking code! Exclude jquery! :D", 
                            "complete": false
                        }
                    ], 
                    "id": "ivartech.ivar.draw.filter"
                }
            }, 
            "ivartech.ivar.search": {
                "content": [
                    {
                        "parent": "ivar.search.", 
                        "doc": {
                            "description": [
                                ""
                            ], 
                            "excerpt": "", 
                            "lines": 81, 
                            "uri": "dipdoc/ivartech/ivar/search.js", 
                            "param": [
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "boolean"
                                    ], 
                                    "name": "sorted=true", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "number", 
                                        "string"
                                    ], 
                                    "name": "field", 
                                    "description": ""
                                }
                            ], 
                            "file": [], 
                            "sloc": 69, 
                            "todo": [
                                {
                                    "urgent": false, 
                                    "task": "TEST", 
                                    "complete": false
                                }
                            ], 
                            "id": "ivartech.ivar.search"
                        }, 
                        "type": "function", 
                        "name": "quickSearch ", 
                        "unit": {}
                    }
                ], 
                "header": {
                    "description": [
                        ""
                    ], 
                    "excerpt": "", 
                    "lines": 81, 
                    "uri": "dipdoc/ivartech/ivar/search.js", 
                    "param": [
                        {
                            "mandatory": false, 
                            "type": [
                                "boolean"
                            ], 
                            "name": "sorted=true", 
                            "description": ""
                        }, 
                        {
                            "mandatory": false, 
                            "type": [
                                "number", 
                                "string"
                            ], 
                            "name": "field", 
                            "description": ""
                        }
                    ], 
                    "file": [], 
                    "sloc": 69, 
                    "todo": [
                        {
                            "urgent": false, 
                            "task": "TEST", 
                            "complete": false
                        }
                    ], 
                    "id": "ivartech.ivar.search"
                }
            }, 
            "ivartech.ivar.net.Communication": {
                "content": [
                    {
                        "parent": "ivar.net.", 
                        "doc": {
                            "description": [
                                ""
                            ], 
                            "excerpt": "", 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "options", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.url", 
                                    "description": "URL of server side interface"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "boolean"
                                    ], 
                                    "name": "options.async=true", 
                                    "description": "Should a request be asynchronous or not"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.method='GET'", 
                                    "description": "HTTP method GET, POST, PUT, DELETE"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.content_type='application/json'", 
                                    "description": "Content MIME type json|rest|xml| image|file..."
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.user", 
                                    "description": "User name for HTTP auth"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.password", 
                                    "description": "User password for HTTP auth"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "boolean"
                                    ], 
                                    "name": "history", 
                                    "description": "\n"
                                }
                            ], 
                            "constructor": [
                                ""
                            ], 
                            "classdesc": [
                                ""
                            ], 
                            "property": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "Map"
                                    ], 
                                    "name": "registered", 
                                    "description": "Map of all registered request objects where key is the name of the method invoked on server"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "Map"
                                    ], 
                                    "name": "sent", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "Map"
                                    ], 
                                    "name": "received", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "Map"
                                    ], 
                                    "name": "unsuccessful", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "defaults", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "boolean"
                                    ], 
                                    "name": "defaults.async=", 
                                    "description": "true"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "defaults.method=", 
                                    "description": "'GET'"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "defaults.content_type=", 
                                    "description": "'application/json'"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "boolean"
                                    ], 
                                    "name": "history", 
                                    "description": "\n"
                                }
                            ], 
                            "todo": [
                                {
                                    "urgent": false, 
                                    "task": "Add file upload methods, form submission , and Image download methods. REST and XML-RPC conversions. SOAP? Multi method calls on server, multi responses...", 
                                    "complete": false
                                }
                            ], 
                            "class": [
                                ""
                            ]
                        }, 
                        "type": "function", 
                        "name": "Communication ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.net.Communication", 
                        "doc": {
                            "excerpt": "Applies new options to the default template", 
                            "description": [
                                "Applies new options to the default template"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "options", 
                                    "description": "\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "applyOptions ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.net.Communication", 
                        "doc": {
                            "excerpt": "Registers a method to be called with all of it's constant options. Options that are not constant are request.params. If only a string is passed it becomes a method name request.method. Method can be further called Communication.nameOfMethod();", 
                            "description": [
                                "Registers a method to be called with all of it's constant options. Options that are not constant are request.params. If only a string is passed it becomes a method name request.method. Method can be further called Communication.nameOfMethod();"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "object"
                                    ], 
                                    "name": "obj", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "obj.request", 
                                    "description": "JSON-RPC formed request: method name and params"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "obj.request.id", 
                                    "description": "Request UID string if not supplied it is automatically generated"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.request.method", 
                                    "description": "Name of the method to be invoked on server"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "obj.request.params", 
                                    "description": "Request data to be submitted to method on server as its parameters"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.uri", 
                                    "description": "URI of server side interface"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "boolean"
                                    ], 
                                    "name": "obj.async=true", 
                                    "description": "Should a request be asynchronous or not"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.method='GET'", 
                                    "description": "HTTP method GET, POST, PUT, DELETE"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.content_type='application/json'", 
                                    "description": "Content MIME type json|rest|xml| image|file..."
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.user", 
                                    "description": "User name for HTTP auth"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.password", 
                                    "description": "User password for HTTP auth\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "register ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.net.Communication", 
                        "doc": {
                            "excerpt": "Removes already registered function so it can't be called anymore", 
                            "description": [
                                "Removes already registered function so it can't be called anymore"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "method_name", 
                                    "description": "\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "unregister ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.net.Communication", 
                        "doc": {
                            "excerpt": "Send function of the communication class, used to send request to server", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "If sending is successful or not\n"
                                }
                            ], 
                            "description": [
                                "Send function of the communication class, used to send request to server"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "options", 
                                    "description": "Option object containing request data"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "options.request", 
                                    "description": "JSON-RPC formed request: method name and params"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "options.request.id", 
                                    "description": "Request UID string if not supplied it is automatically generated"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.request.method", 
                                    "description": "Name of the method to be invoked on server"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "options.request.params", 
                                    "description": "Request data to be submitted to method on server as its parameters"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.uri", 
                                    "description": "URI of server side interface"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "boolean"
                                    ], 
                                    "name": "options.async=true", 
                                    "description": "Should a request be asynchronous or not"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.method='GET'", 
                                    "description": "HTTP method GET, POST, PUT, DELETE"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.content_type='application/json'", 
                                    "description": "Content MIME type json|rest|xml| image|file..."
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.user", 
                                    "description": "User name for HTTP auth"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "options.password", 
                                    "description": "User password for HTTP auth\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "send ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.net.Communication", 
                        "doc": {
                            "excerpt": "Method that is triggered upon receiving response from the server, It checks HTTP response status and parses it accordingly", 
                            "todo": [
                                {
                                    "urgent": false, 
                                    "task": "Support for xml response format.", 
                                    "complete": false
                                }
                            ], 
                            "description": [
                                "Method that is triggered upon receiving response from the server, It checks HTTP response status and parses it accordingly"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "obj", 
                                    "description": ""
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "number"
                                    ], 
                                    "name": "obj.status", 
                                    "description": "XMLHttpRequest.status"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.date", 
                                    "description": "XMLHttpRequest.getResponseHeader('Date')"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.response_text", 
                                    "description": "XMLHttpRequest.responseText"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "obj.response_type", 
                                    "description": "XMLHttpRequest.getResponseHeader('Content-Type')"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "obj.id", 
                                    "description": "Identificator of the request object\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "receive ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.net.Communication", 
                        "doc": {
                            "excerpt": "Method that is called when send|receive methods fail for some reason. It stores request object into unsuccessful map.", 
                            "description": [
                                "Method that is called when send|receive methods fail for some reason. It stores request object into unsuccessful map."
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "object"
                                    ], 
                                    "name": "obj", 
                                    "description": "Request object described in the send method options {@see ivar.util.Communication.send}"
                                }, 
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string"
                                    ], 
                                    "name": "err", 
                                    "description": "Error message"
                                }, 
                                {
                                    "mandatory": false, 
                                    "type": [
                                        "boolean"
                                    ], 
                                    "name": "store=true", 
                                    "description": "If store is true object will be stored to unsuccessful Map\n"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "failed ", 
                        "unit": {}
                    }, 
                    {
                        "parent": "ivar.net.Communication", 
                        "doc": {
                            "excerpt": "Resends unsuccessful request based on provided request id", 
                            "return": [
                                {
                                    "type": [
                                        "boolean"
                                    ], 
                                    "description": "Returns true if successful\n"
                                }
                            ], 
                            "description": [
                                "Resends unsuccessful request based on provided request id"
                            ], 
                            "param": [
                                {
                                    "mandatory": true, 
                                    "type": [
                                        "string", 
                                        "number"
                                    ], 
                                    "name": "id", 
                                    "description": "Identificator of unsuccessful request object"
                                }
                            ]
                        }, 
                        "type": "function", 
                        "name": "resend ", 
                        "unit": {}
                    }
                ], 
                "header": {
                    "description": [
                        ""
                    ], 
                    "copyright": [
                        "IVARTECH http://ivartech.com"
                    ], 
                    "author": [
                        "Nikola Stamatovic Stamat <stamat@ivartech.com>"
                    ], 
                    "excerpt": "", 
                    "namespace": [
                        "ivar.net\n"
                    ], 
                    "uri": "dipdoc/ivartech/ivar/net/Communication.js", 
                    "id": "ivartech.ivar.net.Communication", 
                    "version": [
                        "20130313\n"
                    ], 
                    "file": [
                        "IVARTECH Communication class, for client to server AJAX comunication"
                    ], 
                    "sloc": 299, 
                    "lines": 479
                }
            }, 
            "ivartech.ivar.data.jules": {
                "content": [], 
                "header": {
                    "file": [], 
                    "description": [
                        "jules.js\nJULES - (another) JavaScript Schema Validator\nEzekiel 25:17"
                    ], 
                    "copyright": [
                        "IVARTECH < http://ivartech.com >"
                    ], 
                    "author": [
                        "Nikola Stamatovic Stamat < stamat@ivartech.com >"
                    ], 
                    "lines": 711, 
                    "since": [
                        ""
                    ], 
                    "excerpt": "jules.js", 
                    "uri": "dipdoc/ivartech/ivar/data/jules.js", 
                    "licence": [
                        "MIT"
                    ], 
                    "sloc": 570, 
                    "id": "ivartech.ivar.data.jules"
                }
            }, 
            "ivartech.ivar.html": {
                "content": [], 
                "header": {
                    "description": [
                        ""
                    ], 
                    "excerpt": "", 
                    "lines": 80, 
                    "uri": "dipdoc/ivartech/ivar/html.js", 
                    "param": [
                        "spec {String} name,id,tag\n"
                    ], 
                    "file": [], 
                    "sloc": 63, 
                    "id": "ivartech.ivar.html"
                }
            }, 
            "ivartech.ivar.data.Stack": {
                "content": [], 
                "header": {
                    "description": [
                        ""
                    ], 
                    "copyright": [
                        "IVARTECH http://ivartech.com"
                    ], 
                    "author": [
                        "Nikola Stamatovic Stamat <stamat@ivartech.com>"
                    ], 
                    "excerpt": "", 
                    "namespace": [
                        "ivar\n"
                    ], 
                    "uri": "dipdoc/ivartech/ivar/data/Stack.js", 
                    "id": "ivartech.ivar.data.Stack", 
                    "version": [
                        "20130623\n"
                    ], 
                    "file": [
                        "Stack.js simple stack data structure"
                    ], 
                    "sloc": 37, 
                    "lines": 54
                }
            }
        }, 
        "details": {
            "lang": "js", 
            "root": "dipdoc"
        }
    }
}